definitions:
  models.AdminLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  models.ChangePassword:
    properties:
      old_password:
        type: string
      password:
        type: string
      resetted_password:
        type: string
    type: object
  models.ChatRequest:
    properties:
      friendID:
        type: string
      limit:
        type: string
      offset:
        type: string
    required:
    - friendID
    - limit
    - offset
    type: object
  models.CreateCommentPost:
    properties:
      comment:
        type: string
      post_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.EditProfile:
    properties:
      bio:
        type: string
      email:
        type: string
      location:
        type: string
      name:
        type: string
      phone:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.OtpVerification:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - otp
    type: object
  models.UpdateCommentPost:
    properties:
      comment:
        type: string
      comment_id:
        type: integer
      post_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  models.UserProfile:
    properties:
      bio:
        type: string
      email:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      phone:
        type: string
      username:
        type: string
      website:
        type: string
    type: object
  models.UserSignup:
    properties:
      bio:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      password:
        maxLength: 20
        minLength: 6
        type: string
      phone_number:
        type: string
    required:
    - email
    - password
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact:
    name: API Support
  description: Explorite is a social media platform
  title: Go + Gin social media API Explorite
  version: 1.0.0
paths:
  /admin/block:
    post:
      description: Block a user by ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Block a User
      tags:
      - Admin
  /admin/list:
    get:
      description: Retrieve a paginated list of users
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Users
      tags:
      - Admin
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticate an admin account
      parameters:
      - description: Admin Login Details
        in: body
        name: adminDetails
        required: true
        schema:
          $ref: '#/definitions/models.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Login
      tags:
      - Admin
  /admin/unblock:
    post:
      description: Unblock a user by ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Unblock a User
      tags:
      - Admin
  /chat/message:
    get:
      consumes:
      - application/json
      description: Retrieve UsersChats
      parameters:
      - description: GetChat details
        in: body
        name: chatRequest
        required: true
        schema:
          $ref: '#/definitions/models.ChatRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: Get Users Chats
      tags:
      - Chat
  /post/downvote:
    post:
      description: Downvote a post by ID
      parameters:
      - description: Post ID
        in: query
        name: postid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Downvote a Post
      tags:
      - Post
  /post/upvote:
    post:
      description: Upvote a post by ID
      parameters:
      - description: Post ID
        in: query
        name: postid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Upvote a Post
      tags:
      - Post
  /posts/comment:
    post:
      consumes:
      - application/json
      description: Create a comment on a post by providing post ID and comment content
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateCommentPost'
      produces:
      - application/json
      responses:
        "200":
          description: Comment created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: incorrect format'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: failed to create comment'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Create a comment on a post
      tags:
      - Post
  /posts/comment/delete:
    delete:
      consumes:
      - application/json
      description: Delete a comment on a post by providing post ID and comment ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: incorrect format'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: failed to delete comment'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a comment on a post
      tags:
      - Post
  /posts/comment/update:
    put:
      consumes:
      - application/json
      description: Update a comment on a post by providing comment ID, post ID, and
        updated comment content
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        type: integer
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: integer
      - description: Comment request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCommentPost'
      produces:
      - application/json
      responses:
        "200":
          description: Comment updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: 'Bad request: incorrect format'
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Internal server error: failed to update comment'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update a comment on a post
      tags:
      - Post
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user
      parameters:
      - description: User Login Details
        in: body
        name: userDetails
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Login
      tags:
      - User
  /user/otpverify:
    post:
      consumes:
      - application/json
      description: Verify the OTP sent to the user's email
      parameters:
      - description: OTP Verification Details
        in: body
        name: otpVerification
        required: true
        schema:
          $ref: '#/definitions/models.OtpVerification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - User
  /user/post/{postid}:
    delete:
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: postid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a post
      tags:
      - Post
  /user/post/add:
    post:
      consumes:
      - multipart/form-data
      description: Create a new post with caption and media
      parameters:
      - description: Post Caption
        in: formData
        name: caption
        required: true
        type: string
      - description: Media URL
        in: formData
        name: mediaurl
        required: true
        type: string
      - description: Post Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add a new post
      tags:
      - Post
  /user/post/edit:
    patch:
      consumes:
      - multipart/form-data
      description: Edit the caption of an existing post
      parameters:
      - description: Post ID
        in: formData
        name: postid
        required: true
        type: string
      - description: Post Caption
        in: formData
        name: caption
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Edit a post
      tags:
      - Post
  /user/post/list:
    get:
      description: Get a list of all posts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: List all posts
      tags:
      - Post
  /user/profile/add:
    post:
      consumes:
      - application/json
      description: Add a new profile for the user
      parameters:
      - description: User Profile Details
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/models.UserProfile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add User Profile
      tags:
      - User
  /user/profile/change-password:
    patch:
      consumes:
      - application/json
      description: Change the password of the user
      parameters:
      - description: Change Password Details
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Change User Password
      tags:
      - User
  /user/profile/edit:
    patch:
      consumes:
      - application/json
      description: Edit the profile details of the user
      parameters:
      - description: Edit Profile Details
        in: body
        name: editProfile
        required: true
        schema:
          $ref: '#/definitions/models.EditProfile'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Edit User Profile
      tags:
      - User
  /user/profile/get:
    get:
      description: Get the profile of the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get User Profile
      tags:
      - User
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User Sign Up Details
        in: body
        name: userDetails
        required: true
        schema:
          $ref: '#/definitions/models.UserSignup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User Sign Up
      tags:
      - User
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
