// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "authservice/pkg/domain"
	models "authservice/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddProfile mocks base method.
func (m *MockUserUseCase) AddProfile(id int, profile models.UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfile", id, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProfile indicates an expected call of AddProfile.
func (mr *MockUserUseCaseMockRecorder) AddProfile(id, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfile", reflect.TypeOf((*MockUserUseCase)(nil).AddProfile), id, profile)
}

// ChangePassword mocks base method.
func (m *MockUserUseCase) ChangePassword(id int, old, password, repassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, old, password, repassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserUseCaseMockRecorder) ChangePassword(id, old, password, repassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ChangePassword), id, old, password, repassword)
}

// EditProfile mocks base method.
func (m *MockUserUseCase) EditProfile(id int, user models.EditProfile) (models.EditProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditProfile", id, user)
	ret0, _ := ret[0].(models.EditProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditProfile indicates an expected call of EditProfile.
func (mr *MockUserUseCaseMockRecorder) EditProfile(id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProfile", reflect.TypeOf((*MockUserUseCase)(nil).EditProfile), id, user)
}

// GetProfile mocks base method.
func (m *MockUserUseCase) GetProfile(id int) (models.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", id)
	ret0, _ := ret[0].(models.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserUseCaseMockRecorder) GetProfile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserUseCase)(nil).GetProfile), id)
}

// LoginHandler mocks base method.
func (m *MockUserUseCase) LoginHandler(userDetails models.UserLogin) (*domain.TokenUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginHandler", userDetails)
	ret0, _ := ret[0].(*domain.TokenUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockUserUseCaseMockRecorder) LoginHandler(userDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockUserUseCase)(nil).LoginHandler), userDetails)
}

// OtpVerification mocks base method.
func (m *MockUserUseCase) OtpVerification(email, otp string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OtpVerification", email, otp)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OtpVerification indicates an expected call of OtpVerification.
func (mr *MockUserUseCaseMockRecorder) OtpVerification(email, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OtpVerification", reflect.TypeOf((*MockUserUseCase)(nil).OtpVerification), email, otp)
}

// UserOTPLogin mocks base method.
func (m *MockUserUseCase) UserOTPLogin(email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOTPLogin", email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserOTPLogin indicates an expected call of UserOTPLogin.
func (mr *MockUserUseCaseMockRecorder) UserOTPLogin(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOTPLogin", reflect.TypeOf((*MockUserUseCase)(nil).UserOTPLogin), email)
}

// UserSignUp mocks base method.
func (m *MockUserUseCase) UserSignUp(userdeatils models.UserSignup) (*domain.TokenUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", userdeatils)
	ret0, _ := ret[0].(*domain.TokenUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserUseCaseMockRecorder) UserSignUp(userdeatils interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserUseCase)(nil).UserSignUp), userdeatils)
}
